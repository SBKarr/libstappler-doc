{
	"_fullName": "/home/sbkarr/stappler/libstappler-root/core/db/STStorageConfig.h",
	"_kind": "file",
	"_name": "/home/sbkarr/stappler/libstappler-root/core/db/STStorageConfig.h",
	"childs": [{
		"_fullName": "SPTime.h",
		"_kind": "include directive",
		"_name": "SPTime.h",
		"id": 1748455668,
		"include": "/home/sbkarr/stappler/libstappler-root/core/core/utils/SPTime.h",
		"include_kind": "local",
		"kind": "include directive",
		"name": "SPTime.h"
	}, {
		"_fullName": "SPFilesystem.h",
		"_kind": "include directive",
		"_name": "SPFilesystem.h",
		"id": 2443679527,
		"include": "/home/sbkarr/stappler/libstappler-root/core/filesystem/SPFilesystem.h",
		"include_kind": "local",
		"kind": "include directive",
		"name": "SPFilesystem.h"
	}, {
		"_fullName": "STAPPLER_DB_STSTORAGECONFIG_H_",
		"_kind": "macro definition",
		"_name": "STAPPLER_DB_STSTORAGECONFIG_H_",
		"id": 1266330521,
		"is_function_like": false,
		"is_object_like": true,
		"is_variadic": false,
		"kind": "macro definition",
		"name": "STAPPLER_DB_STSTORAGECONFIG_H_",
		"replacement": ""
	}, {
		"_fullName": "::stappler",
		"_kind": "namespace",
		"_name": "stappler",
		"childs": [{
			"_fullName": "::stappler::db",
			"_kind": "namespace",
			"_name": "db",
			"childs": [{
				"_fullName": "::stappler::db::StorageRoot",
				"_kind": "class",
				"_name": "StorageRoot",
				"childs": null,
				"class_kind": "class",
				"id": 1147890691,
				"is_declaration": true,
				"is_definition": false,
				"is_final": false,
				"kind": "class",
				"name": "StorageRoot",
				"scope": {
					"name": "StorageRoot"
				},
				"semantic_scope": ""
			}, {
				"_fullName": "::stappler::db::config",
				"_kind": "namespace",
				"_name": "config",
				"childs": [{
					"_fullName": "::stappler::db::config::getMaxAuthTime()",
					"_kind": "function",
					"_name": "getMaxAuthTime",
					"body_kind": "definition",
					"id": 2778970917,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxAuthTime",
					"return_type": {
						"_typeName": "auto",
						"kind": "auto"
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getMaxLoginFailure()",
					"_kind": "function",
					"_name": "getMaxLoginFailure",
					"body_kind": "definition",
					"id": 1373355502,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxLoginFailure",
					"return_type": {
						"_typeName": "auto",
						"kind": "auto"
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getMaxVarSize()",
					"_kind": "function",
					"_name": "getMaxVarSize",
					"body_kind": "definition",
					"id": 1925868285,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxVarSize",
					"return_type": {
						"_typeName": "size_t",
						"kind": "user_defined",
						"target": {
							"name": "size_t"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getMaxRequestSize()",
					"_kind": "function",
					"_name": "getMaxRequestSize",
					"body_kind": "definition",
					"id": 1429156886,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxRequestSize",
					"return_type": {
						"_typeName": "size_t",
						"kind": "user_defined",
						"target": {
							"name": "size_t"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getMaxFileSize()",
					"_kind": "function",
					"_name": "getMaxFileSize",
					"body_kind": "definition",
					"id": 1092450822,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxFileSize",
					"return_type": {
						"_typeName": "size_t",
						"kind": "user_defined",
						"target": {
							"name": "size_t"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getInputUpdateTime()",
					"_kind": "function",
					"_name": "getInputUpdateTime",
					"body_kind": "definition",
					"id": 1195503855,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getInputUpdateTime",
					"return_type": {
						"_typeName": "auto",
						"kind": "auto"
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getInputUpdateFrequency()",
					"_kind": "function",
					"_name": "getInputUpdateFrequency",
					"body_kind": "definition",
					"id": 2085632589,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getInputUpdateFrequency",
					"return_type": {
						"_typeName": "auto",
						"kind": "auto"
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getMaxInputPostSize()",
					"_kind": "function",
					"_name": "getMaxInputPostSize",
					"body_kind": "definition",
					"id": 1787755876,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxInputPostSize",
					"return_type": {
						"_typeName": "size_t",
						"kind": "user_defined",
						"target": {
							"name": "size_t"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getMaxInputFileSize()",
					"_kind": "function",
					"_name": "getMaxInputFileSize",
					"body_kind": "definition",
					"id": 1714916907,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxInputFileSize",
					"return_type": {
						"_typeName": "size_t",
						"kind": "user_defined",
						"target": {
							"name": "size_t"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getMaxInputVarSize()",
					"_kind": "function",
					"_name": "getMaxInputVarSize",
					"body_kind": "definition",
					"id": 728516960,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxInputVarSize",
					"return_type": {
						"_typeName": "size_t",
						"kind": "user_defined",
						"target": {
							"name": "size_t"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getMaxExtraFieldSize()",
					"_kind": "function",
					"_name": "getMaxExtraFieldSize",
					"body_kind": "definition",
					"id": 1928264525,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getMaxExtraFieldSize",
					"return_type": {
						"_typeName": "size_t",
						"kind": "user_defined",
						"target": {
							"name": "size_t"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getDefaultTextMin()",
					"_kind": "function",
					"_name": "getDefaultTextMin",
					"body_kind": "definition",
					"id": 972218719,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getDefaultTextMin",
					"return_type": {
						"_typeName": "auto",
						"kind": "auto"
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getDefaultTextMax()",
					"_kind": "function",
					"_name": "getDefaultTextMax",
					"body_kind": "definition",
					"id": 3397478211,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getDefaultTextMax",
					"return_type": {
						"_typeName": "auto",
						"kind": "auto"
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getDefaultPasswordSalt()",
					"_kind": "function",
					"_name": "getDefaultPasswordSalt",
					"body_kind": "definition",
					"id": 2892764157,
					"is_consteval": false,
					"is_constexpr": false,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getDefaultPasswordSalt",
					"return_type": {
						"_typeName": "auto",
						"kind": "auto"
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getKeyValueStorageTime()",
					"_kind": "function",
					"_name": "getKeyValueStorageTime",
					"body_kind": "definition",
					"id": 4090472159,
					"is_consteval": false,
					"is_constexpr": false,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getKeyValueStorageTime",
					"return_type": {
						"_typeName": "stappler::TimeInterval",
						"kind": "user_defined",
						"target": {
							"name": "stappler::TimeInterval",
							"objects": [{
								"_fullName": "::stappler::TimeInterval",
								"_kind": "class",
								"_name": "TimeInterval",
								"bases": [{
									"_fullName": "TimeStorage",
									"_kind": "base class specifier",
									"_name": "TimeStorage",
									"access_specifier": "public",
									"id": 1530442930,
									"is_virtual": false,
									"kind": "base class specifier",
									"name": "TimeStorage",
									"type": {
										"_typeName": "stappler::TimeStorage",
										"kind": "user_defined",
										"target": {
											"name": "stappler::TimeStorage",
											"objects": [{
												"_fullName": "::stappler::TimeStorage",
												"_kind": "class",
												"_name": "TimeStorage",
												"class_kind": "class",
												"id": 3963994454,
												"is_declaration": false,
												"is_definition": true,
												"is_final": false,
												"kind": "class",
												"name": "TimeStorage",
												"scope": {
													"name": "TimeStorage"
												},
												"semantic_scope": ""
											}]
										}
									}
								}],
								"class_kind": "class",
								"id": 4115788410,
								"is_declaration": false,
								"is_definition": true,
								"is_final": false,
								"kind": "class",
								"name": "TimeInterval",
								"scope": {
									"name": "TimeInterval"
								},
								"semantic_scope": ""
							}]
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getInternalsStorageTime()",
					"_kind": "function",
					"_name": "getInternalsStorageTime",
					"body_kind": "definition",
					"id": 666883157,
					"is_consteval": false,
					"is_constexpr": false,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getInternalsStorageTime",
					"return_type": {
						"_typeName": "stappler::TimeInterval",
						"kind": "user_defined",
						"target": {
							"name": "stappler::TimeInterval",
							"objects": [{
								"_fullName": "::stappler::TimeInterval",
								"_kind": "class",
								"_name": "TimeInterval",
								"bases": [{
									"_fullName": "TimeStorage",
									"_kind": "base class specifier",
									"_name": "TimeStorage",
									"access_specifier": "public",
									"id": 1530442930,
									"is_virtual": false,
									"kind": "base class specifier",
									"name": "TimeStorage",
									"type": {
										"_typeName": "stappler::TimeStorage",
										"kind": "user_defined",
										"target": {
											"name": "stappler::TimeStorage",
											"objects": [{
												"_fullName": "::stappler::TimeStorage",
												"_kind": "class",
												"_name": "TimeStorage",
												"class_kind": "class",
												"id": 3963994454,
												"is_declaration": false,
												"is_definition": true,
												"is_final": false,
												"kind": "class",
												"name": "TimeStorage",
												"scope": {
													"name": "TimeStorage"
												},
												"semantic_scope": ""
											}]
										}
									}
								}],
								"class_kind": "class",
								"id": 4115788410,
								"is_declaration": false,
								"is_definition": true,
								"is_final": false,
								"kind": "class",
								"name": "TimeInterval",
								"scope": {
									"name": "TimeInterval"
								},
								"semantic_scope": ""
							}]
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getStorageInterfaceKey()",
					"_kind": "function",
					"_name": "getStorageInterfaceKey",
					"body_kind": "definition",
					"id": 3553486059,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getStorageInterfaceKey",
					"return_type": {
						"_typeName": "auto const",
						"cv_qualifier": "const",
						"kind": "cv_qualified",
						"type": {
							"_typeName": "auto",
							"kind": "auto"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getTransactionPrefixKey()",
					"_kind": "function",
					"_name": "getTransactionPrefixKey",
					"body_kind": "definition",
					"id": 1464552055,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getTransactionPrefixKey",
					"return_type": {
						"_typeName": "auto const",
						"cv_qualifier": "const",
						"kind": "cv_qualified",
						"type": {
							"_typeName": "auto",
							"kind": "auto"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getTransactionStackKey()",
					"_kind": "function",
					"_name": "getTransactionStackKey",
					"body_kind": "definition",
					"id": 726861130,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getTransactionStackKey",
					"return_type": {
						"_typeName": "auto const",
						"cv_qualifier": "const",
						"kind": "cv_qualified",
						"type": {
							"_typeName": "auto",
							"kind": "auto"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getUploadTmpFilePrefix()",
					"_kind": "function",
					"_name": "getUploadTmpFilePrefix",
					"body_kind": "definition",
					"id": 2325234589,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getUploadTmpFilePrefix",
					"return_type": {
						"_typeName": "auto const",
						"cv_qualifier": "const",
						"kind": "cv_qualified",
						"type": {
							"_typeName": "auto",
							"kind": "auto"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getUploadTmpImagePrefix()",
					"_kind": "function",
					"_name": "getUploadTmpImagePrefix",
					"body_kind": "definition",
					"id": 1134329890,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getUploadTmpImagePrefix",
					"return_type": {
						"_typeName": "auto const",
						"cv_qualifier": "const",
						"kind": "cv_qualified",
						"type": {
							"_typeName": "auto",
							"kind": "auto"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getStorageBroadcastChannelName()",
					"_kind": "function",
					"_name": "getStorageBroadcastChannelName",
					"body_kind": "definition",
					"id": 984793713,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getStorageBroadcastChannelName",
					"return_type": {
						"_typeName": "auto const",
						"cv_qualifier": "const",
						"kind": "cv_qualified",
						"type": {
							"_typeName": "auto",
							"kind": "auto"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}, {
					"_fullName": "::stappler::db::config::getResourceResolverMaxDepth()",
					"_kind": "function",
					"_name": "getResourceResolverMaxDepth",
					"body_kind": "definition",
					"id": 773731521,
					"is_consteval": false,
					"is_constexpr": true,
					"is_declaration": false,
					"is_definition": true,
					"is_variadic": false,
					"kind": "function",
					"name": "getResourceResolverMaxDepth",
					"return_type": {
						"_typeName": "uint16_t",
						"kind": "user_defined",
						"target": {
							"name": "uint16_t"
						}
					},
					"semantic_scope": "",
					"signature": "()"
				}],
				"id": 3185537527,
				"is_anonymous": false,
				"is_inline": false,
				"is_nested": false,
				"kind": "namespace",
				"name": "config",
				"scope": {
					"name": "config"
				}
			}, {
				"_fullName": "::stappler::db::setStorageRoot(stappler::db::StorageRoot*)",
				"_kind": "function",
				"_name": "setStorageRoot",
				"body_kind": "declaration",
				"id": 2964086049,
				"is_consteval": false,
				"is_constexpr": false,
				"is_declaration": true,
				"is_definition": false,
				"is_variadic": false,
				"kind": "function",
				"name": "setStorageRoot",
				"parameters": [{
					"_fullName": "",
					"_kind": "function parameter",
					"_name": "",
					"id": 46947589,
					"kind": "function parameter",
					"name": "",
					"type": {
						"_typeName": "stappler::db::StorageRoot*",
						"kind": "pointer",
						"pointee": {
							"_typeName": "stappler::db::StorageRoot",
							"kind": "user_defined",
							"target": {
								"name": "stappler::db::StorageRoot",
								"objects": [{
									"_fullName": "::stappler::db::StorageRoot",
									"_kind": "class",
									"_name": "StorageRoot",
									"class_kind": "class",
									"id": 1147890691,
									"is_declaration": false,
									"is_definition": true,
									"is_final": false,
									"kind": "class",
									"name": "StorageRoot",
									"scope": {
										"name": "StorageRoot"
									},
									"semantic_scope": ""
								}]
							}
						}
					}
				}],
				"return_type":  {
					"_typeName": "void",
					"builtin_type_kind": "void",
					"kind": "builtin"
				},
				"semantic_scope": "",
				"signature": "(stappler::db::StorageRoot*)"
			}],
			"id": 3996859821,
			"is_anonymous": false,
			"is_inline": false,
			"is_nested": true,
			"kind": "namespace",
			"name": "db",
			"scope": {
				"name": "db"
			}
		}],
		"id": 96045446,
		"is_anonymous": false,
		"is_inline": false,
		"is_nested": false,
		"kind": "namespace",
		"name": "stappler",
		"scope": {
			"name": "stappler"
		}
	}],
	"id": 2318671898,
	"kind": "file",
	"name": "/home/sbkarr/stappler/libstappler-root/core/db/STStorageConfig.h",
	"unmatched_comments": [{
		"line": 22,
		"text": "\nCopyright (c) 2019-2022 Roman Katuntsev <sbkarr@stappler.org>\nCopyright (c) 2023 Stappler LLC <admin@stappler.dev>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
	}]
}